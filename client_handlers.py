# client_handlers.py
import os
from bot_instance import bot
import data_manager
import keyboards
import utils
from config import WELCOME_IMAGE_PATH, TEXTS, ADMIN_GROUP_ID, DEFAULT_TIMEZONE
import gsheet_manager
from datetime import datetime


# --- –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è _send_or_edit_main_message ---
def _send_or_edit_main_message(bot_obj, chat_id, text, reply_markup=None, photo_path=None, existing_message_id=None,
                               parse_mode='Markdown', new_message_if_edit_fails=True):
    new_message_obj = None
    if existing_message_id:
        try:
            if photo_path and os.path.exists(photo_path):
                print(
                    f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {existing_message_id} —Å –Ω–æ–≤—ã–º —Ñ–æ—Ç–æ. –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –∏ —à–ª–µ–º –Ω–æ–≤–æ–µ.")
                raise Exception("Cannot edit message with new photo, sending new one.")
            new_message_obj = bot_obj.edit_message_text(text, chat_id=chat_id, message_id=existing_message_id,
                                                        reply_markup=reply_markup, parse_mode=parse_mode)
        except Exception as e_edit:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {existing_message_id} (–û—à–∏–±–∫–∞: {e_edit}).")
            if new_message_if_edit_fails:
                print("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–∑–∞–º–µ–Ω.")
                try:
                    bot_obj.delete_message(chat_id=chat_id, message_id=existing_message_id)
                except Exception as e_del:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {existing_message_id}: {e_del}")
                if photo_path and os.path.exists(photo_path):
                    with open(photo_path, 'rb') as photo_file:
                        new_message_obj = bot_obj.send_photo(chat_id, photo_file, caption=text,
                                                             reply_markup=reply_markup, parse_mode=parse_mode)
                else:
                    new_message_obj = bot_obj.send_message(chat_id, text, reply_markup=reply_markup,
                                                           parse_mode=parse_mode)
    else:
        if photo_path and os.path.exists(photo_path):
            with open(photo_path, 'rb') as photo_file:
                new_message_obj = bot_obj.send_photo(chat_id, photo_file, caption=text, reply_markup=reply_markup,
                                                     parse_mode=parse_mode)
        else:
            new_message_obj = bot_obj.send_message(chat_id, text, reply_markup=reply_markup, parse_mode=parse_mode)
    if new_message_obj: data_manager.update_user_session_data(chat_id, 'main_message_id', new_message_obj.message_id)
    return new_message_obj


# --- –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞ ---
def send_welcome(message, bot_obj):  # message –∑–¥–µ—Å—å —ç—Ç–æ –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è Telegram
    chat_id = message.chat.id
    user_name = message.from_user.first_name or "–ì–æ—Å—Ç—å"
    user_id = message.from_user.id
    try:
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏ –ø—Ä–∏ /start, –∏ –ø–æ—Å–ª–µ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π.
        # –û–±–Ω–æ–≤–ª—è–µ–º/—Å–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –≤ GSheet —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å user_id –∏ user_name
        if user_id and user_name:
            gsheet_manager.find_or_create_client(user_id, user_name, phone_number=None)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ gsheet_manager.find_or_create_client –ø—Ä–∏ send_welcome: {e}")

    data_manager.init_user_order_session(chat_id)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –∑–∞–∫–∞–∑–∞ –∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏

    welcome_text = f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {utils.escape_markdown(user_name)}! üëã\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞—Ñ–µ The Kitchen\n–Ω–∞—à –±–æ—Ç –≥–æ—Ç–æ–≤ –ø—Ä–∏–Ω—è—Ç—å –í–∞—à –∑–∞–∫–∞–∑\n–î–û–°–¢–ê–í–ö–ê –í PLAGOO –û–¢ 150 —Ç—ã—Å—è—á –ó–ê –ù–ê–® –°–ß–ï–¢"
    markup = keyboards.main_menu_keyboard()
    user_session = data_manager.get_user_session_data(chat_id)
    existing_main_msg_id = user_session.get('main_message_id')

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    if existing_main_msg_id:
        try:
            bot_obj.delete_message(chat_id, existing_main_msg_id)
        except Exception:  # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å, –Ω–µ —Å—Ç—Ä–∞—à–Ω–æ, –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤–æ–µ
            pass

    new_msg = _send_or_edit_main_message(bot_obj, chat_id, welcome_text,
                                         reply_markup=markup,
                                         photo_path=WELCOME_IMAGE_PATH,
                                         existing_message_id=None,  # –í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
                                         new_message_if_edit_fails=True)
    if new_msg:  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ –≥–ª–∞–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        data_manager.update_user_session_data(chat_id, 'main_message_id', new_msg.message_id)
    print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_name} (ID: {chat_id})")


def handle_main_menu_callback(call, bot_obj):
    chat_id = call.message.chat.id;
    user_session = data_manager.get_user_session_data(chat_id)
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º call.message.message_id –∫–∞–∫ ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –µ—Å–ª–∏ main_message_id –Ω–µ –Ω–∞–π–¥–µ–Ω
    message_id = user_session.get('main_message_id') if user_session.get('main_message_id') else call.message.message_id
    user_name = call.from_user.first_name or "–ì–æ—Å—Ç—å";
    user_id = call.from_user.id
    try:
        bot_obj.answer_callback_query(call.id)
    except Exception as e_ans:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback_query (main_menu {call.data}): {e_ans}")

    if call.data == "main_make_order":
        status_details = utils.get_cafe_operational_status_details()
        if not status_details['is_open']:
            text = f"{status_details['status_line']}\n{status_details['schedule_text']}\n\n{TEXTS.get('cafe_closed_can_preorder', '–ö–∞—Ñ–µ –∑–∞–∫—Ä—ã—Ç–æ. –•–æ—Ç–∏—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø—Ä–µ–¥–∑–∞–∫–∞–∑?')}"
            markup = keyboards.confirm_action_keyboard("preorder_yes", "preorder_no", "–î–∞, –æ—Ñ–æ—Ä–º–∏—Ç—å –ø—Ä–µ–¥–∑–∞–∫–∞–∑",
                                                       "–ù–µ—Ç, —Å–ø–∞—Å–∏–±–æ")
            _send_or_edit_main_message(bot_obj, chat_id, text, reply_markup=markup, existing_message_id=message_id);
            return
        start_new_order_process(chat_id, user_id, user_name, bot_obj, message_id)
    elif call.data == "main_cafe_status":
        status_details = utils.get_cafe_operational_status_details()
        text_to_send = status_details['status_line'] + status_details['schedule_text']
        _send_or_edit_main_message(bot_obj, chat_id, text_to_send, reply_markup=keyboards.main_menu_keyboard(),
                                   existing_message_id=message_id)
    elif call.data == "main_feedback":
        data_manager.update_user_session_data(chat_id, 'feedback_info', {})
        data_manager.update_user_session_data(chat_id, 'state', 'awaiting_feedback_name')
        prompt_text = TEXTS.get("feedback_prompt_name", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è (–∫–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è):")
        _send_or_edit_main_message(bot_obj, chat_id, prompt_text,
                                   reply_markup=keyboards.back_to_main_menu_keyboard(),
                                   existing_message_id=message_id)
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –Ω–∞—á–∞–ª –ø—Ä–æ—Ü–µ—Å—Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏. –û–∂–∏–¥–∞–µ—Ç—Å—è –∏–º—è.")


def start_new_order_process(chat_id, user_id, user_name, bot_obj, message_id_to_use, is_preorder=False):
    data_manager.init_user_order_session(chat_id)
    new_order_id = data_manager.create_new_order(chat_id, user_name)
    if is_preorder: data_manager.update_order(new_order_id, {'is_off_hours_order': True, 'status': 'off_hours_pending'})
    data_manager.update_user_session_data(chat_id, 'current_order_id', new_order_id)
    text = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"
    if is_preorder: text = "–í—ã –æ—Ñ–æ—Ä–º–ª—è–µ—Ç–µ –ø—Ä–µ–¥–∑–∞–∫–∞–∑.\n" + text
    user_session = data_manager.get_user_session_data(chat_id);
    cart = user_session.get('cart', [])
    markup = keyboards.categories_keyboard(cart)
    _send_or_edit_main_message(bot_obj, chat_id, text, reply_markup=markup, existing_message_id=message_id_to_use)


def handle_category_selection(call, bot_obj):
    chat_id = call.message.chat.id;
    user_session = data_manager.get_user_session_data(chat_id)
    message_id = user_session.get('main_message_id', call.message.message_id);
    cart = user_session.get('cart', [])
    try:
        bot_obj.answer_callback_query(call.id)
    except Exception as e_ans:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback_query (category_selection {call.data}): {e_ans}")
    if call.data == "menu_unavailable": _send_or_edit_main_message(bot_obj, chat_id, "–ú–µ–Ω—é —Å–µ–π—á–∞—Å –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è.",
                                                                   reply_markup=keyboards.back_to_main_menu_keyboard(),
                                                                   existing_message_id=message_id); return
    category_name = call.data.split('cat_', 1)[1];
    items_in_category = data_manager.menu_data.get(category_name, [])
    if not items_in_category:
        text = f"–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{utils.escape_markdown(category_name)}' –ø–æ–∫–∞ –Ω–µ—Ç –±–ª—é–¥."
        markup = keyboards.categories_keyboard(cart);
        _send_or_edit_main_message(bot_obj, chat_id, text, reply_markup=markup, existing_message_id=message_id);
        return
    markup = keyboards.items_keyboard(category_name, items_in_category, cart)
    text = f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: *{utils.escape_markdown(category_name)}*\n–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ:"
    _send_or_edit_main_message(bot_obj, chat_id, text, reply_markup=markup, existing_message_id=message_id)


# ... (–û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: handle_item_selection, handle_cart_action, –∏ —Ç.–¥. –æ—Å—Ç–∞—é—Ç—Å—è —Ç–∞–∫–∏–º–∏ –∂–µ, –∫–∞–∫ –≤ –≤–∞—à–µ–º —Ñ–∞–π–ª–µ –æ—Ç 01 –∏—é–Ω—è 2025 –≥., 15:16)
# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω–∏ —É –≤–∞—Å –µ—Å—Ç—å.
def handle_item_selection(call, bot_obj):
    chat_id = call.message.chat.id;
    user_session = data_manager.get_user_session_data(chat_id)
    message_id = user_session.get('main_message_id', call.message.message_id);
    item_id_to_add = call.data.split('item_', 1)[1]
    cart = user_session.get('cart', []);
    selected_item_info = None;
    category_of_selected_item = None
    for category, items_list in data_manager.menu_data.items():
        for item_loop in items_list:
            if item_loop.get(
                'id') == item_id_to_add: selected_item_info = item_loop; category_of_selected_item = category; break
        if selected_item_info: break
    if not selected_item_info:
        try:
            bot_obj.answer_callback_query(call.id, "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        except Exception as e_ans:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback_query (item not found): {e_ans}")
        _send_or_edit_main_message(bot_obj, chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.",
                                   reply_markup=keyboards.categories_keyboard(cart), existing_message_id=message_id);
        return
    item_name_for_cart = selected_item_info.get('name_ru', selected_item_info.get('name_en', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä'))
    item_price_for_cart = selected_item_info.get('price', 0);
    item_id_for_cart = selected_item_info.get('id')
    item_in_cart_index = -1
    for i, cart_item_loop in enumerate(cart):
        if cart_item_loop.get('id') == item_id_for_cart: item_in_cart_index = i; break
    if item_in_cart_index != -1:
        cart[item_in_cart_index]['quantity'] += 1
    else:
        cart.append({'id': item_id_for_cart, 'name': item_name_for_cart, 'price': item_price_for_cart, 'quantity': 1})
    data_manager.update_user_session_data(chat_id, 'cart', cart)
    try:
        bot_obj.answer_callback_query(call.id, f"'{item_name_for_cart}' –¥–æ–±–∞–≤–ª–µ–Ω(–∞) –≤ –∫–æ—Ä–∑–∏–Ω—É!")
    except Exception as e_ans:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback_query (item added): {e_ans}")
    items_in_current_category = data_manager.menu_data.get(category_of_selected_item, [])
    markup = keyboards.items_keyboard(category_of_selected_item, items_in_current_category, cart)
    text = f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {utils.escape_markdown(item_name_for_cart)}.\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: *{utils.escape_markdown(category_of_selected_item)}*\n–í—ã–±–µ—Ä–∏—Ç–µ –µ—â–µ –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –∫–æ—Ä–∑–∏–Ω—É:"
    _send_or_edit_main_message(bot_obj, chat_id, text, reply_markup=markup, existing_message_id=message_id)


def handle_cart_action(call, bot_obj):
    chat_id = call.message.chat.id;
    user_session = data_manager.get_user_session_data(chat_id)
    message_id = user_session.get('main_message_id', call.message.message_id);
    action = call.data
    cart = user_session.get('cart', []);
    viewed_removed = user_session.get('viewed_removed_items', [])
    try:
        bot_obj.answer_callback_query(call.id)
    except Exception as e_ans:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback_query (cart_action {action}): {e_ans}")
    item_id_to_remove_from_cart = None
    if action.startswith("cart_remove_"): item_id_to_remove_from_cart = action.split("cart_remove_", 1)[1]
    if action == "cart_show":
        pass
    elif item_id_to_remove_from_cart:
        item_removed_name = None;
        new_cart = []
        for item_in_cart_loop in cart:
            if item_in_cart_loop.get('id') == item_id_to_remove_from_cart:
                item_removed_name = item_in_cart_loop.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä')
                if item_in_cart_loop.get('quantity', 0) > 1: item_in_cart_loop['quantity'] -= 1; new_cart.append(
                    item_in_cart_loop)
            else:
                new_cart.append(item_in_cart_loop)
        if item_removed_name and item_removed_name not in viewed_removed: viewed_removed.append(item_removed_name)
        cart = new_cart;
        data_manager.update_user_session_data(chat_id, 'cart', cart);
        data_manager.update_user_session_data(chat_id, 'viewed_removed_items', viewed_removed)
    elif action == "cart_clear":
        for item_in_cart_loop in cart:
            item_name = item_in_cart_loop.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä')
            if item_name not in viewed_removed: viewed_removed.append(item_name)
        cart = [];
        data_manager.update_user_session_data(chat_id, 'cart', cart);
        data_manager.update_user_session_data(chat_id, 'viewed_removed_items', viewed_removed)
    cart_text = utils.format_cart_text(cart);
    markup = keyboards.cart_keyboard(cart)
    _send_or_edit_main_message(bot_obj, chat_id, cart_text, reply_markup=markup, existing_message_id=message_id)


def handle_order_confirmation_flow(call, bot_obj):
    chat_id = call.message.chat.id;
    user_session = data_manager.get_user_session_data(chat_id)
    message_id = user_session.get('main_message_id', call.message.message_id);
    cart = user_session.get('cart', []);
    order_id = user_session.get('current_order_id')
    try:
        bot_obj.answer_callback_query(call.id)
    except Exception as e_ans:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback_query (order_confirm {call.data}): {e_ans}")
    if call.data == "order_confirm_prompt":
        if not cart: _send_or_edit_main_message(bot_obj, chat_id, "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.",
                                                reply_markup=keyboards.categories_keyboard(cart),
                                                existing_message_id=message_id); return
        cart_summary = utils.format_cart_text(cart);
        text = f"{cart_summary}\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑ –∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ –≤–≤–æ–¥—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏?"
        markup = keyboards.confirm_action_keyboard("order_confirm_yes", "order_confirm_no", "‚úÖ –î–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                                                   "‚¨ÖÔ∏è –ù–µ—Ç, –≤ –∫–æ—Ä–∑–∏–Ω—É")
        _send_or_edit_main_message(bot_obj, chat_id, text, reply_markup=markup, existing_message_id=message_id)
    elif call.data == "order_confirm_yes":
        if not cart: _send_or_edit_main_message(bot_obj, chat_id, "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.",
                                                reply_markup=keyboards.categories_keyboard(cart),
                                                existing_message_id=message_id); return
        if not order_id: _send_or_edit_main_message(bot_obj, chat_id, "–û—à–∏–±–∫–∞ ID –∑–∞–∫–∞–∑–∞.",
                                                    reply_markup=keyboards.main_menu_keyboard(),
                                                    existing_message_id=message_id); data_manager.clear_user_order_session(
            chat_id); return
        total_price = sum(item.get('price', 0) * item.get('quantity', 0) for item in cart)
        items_for_order = [
            {'id': ci.get('id'), 'name': ci.get('name'), 'price': ci.get('price'), 'quantity': ci.get('quantity')} for
            ci in cart]
        data_manager.update_order(order_id, {'items': items_for_order, 'total_price': total_price,
                                             'original_total_price': total_price, 'status': 'client_confirmed',
                                             'viewed_removed_items_final': list(
                                                 user_session.get('viewed_removed_items', []))})
        data_manager.update_user_session_data(chat_id, 'state', 'awaiting_address')
        _send_or_edit_main_message(bot_obj, chat_id, TEXTS.get('order_take_address', "–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:"),
                                   reply_markup=None, existing_message_id=message_id, new_message_if_edit_fails=True)
    elif call.data == "order_confirm_no":
        cart_text = utils.format_cart_text(cart);
        markup = keyboards.cart_keyboard(cart)
        _send_or_edit_main_message(bot_obj, chat_id, cart_text, reply_markup=markup, existing_message_id=message_id)


def process_address_input(message, bot_obj):
    chat_id = message.chat.id;
    user_session = data_manager.get_user_session_data(chat_id)
    main_message_id = user_session.get('main_message_id');
    order_id = user_session.get('current_order_id');
    address = message.text.strip()
    if not order_id or not data_manager.get_order(order_id):
        bot_obj.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.",
                             reply_markup=keyboards.main_menu_keyboard());
        data_manager.clear_user_order_session(chat_id);
        data_manager.update_user_session_data(chat_id, 'state', None);
        return
    data_manager.update_order(order_id, {'address': address, 'status': 'address_received'})
    data_manager.update_user_session_data(chat_id, 'state', 'awaiting_phone')
    if main_message_id:
        try:
            bot_obj.delete_message(chat_id, main_message_id); data_manager.update_user_session_data(chat_id,
                                                                                                    'main_message_id',
                                                                                                    None)
        except Exception as e:
            print(f"Error deleting main_message_id {main_message_id} in process_address_input: {e}")
    try:
        bot_obj.delete_message(chat_id, message.message_id)
    except Exception as e:
        print(f"Error deleting user address message {message.message_id}: {e}")
    new_main_msg = bot_obj.send_message(chat_id, TEXTS.get('order_take_phone', "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:"))
    data_manager.update_user_session_data(chat_id, 'main_message_id', new_main_msg.message_id)


def process_phone_input(message, bot_obj):
    chat_id = message.chat.id;
    user_session = data_manager.get_user_session_data(chat_id)
    main_message_id = user_session.get('main_message_id');
    order_id = user_session.get('current_order_id')
    phone_raw = message.text.strip();
    user_id = message.from_user.id;
    user_name = message.from_user.first_name or "–ì–æ—Å—Ç—å"
    if not order_id or not data_manager.get_order(order_id):
        bot_obj.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.",
                             reply_markup=keyboards.main_menu_keyboard());
        data_manager.clear_user_order_session(chat_id);
        data_manager.update_user_session_data(chat_id, 'state', None);
        return
    validated_phone = utils.validate_phone_number(phone_raw)
    if not validated_phone:
        msg_to_send = TEXTS.get('phone_invalid', "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞.") + "\n" + TEXTS.get('order_take_phone',
                                                                                                 "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
        _send_or_edit_main_message(bot_obj, chat_id, msg_to_send, existing_message_id=main_message_id,
                                   new_message_if_edit_fails=False)
        try:
            bot_obj.delete_message(chat_id, message.message_id)
        except Exception as e:
            print(f"Error deleting user invalid phone message {message.message_id}: {e}")
        return
    data_manager.update_order(order_id, {'phone': validated_phone, 'status': 'phone_received'})
    try:
        gsheet_manager.find_or_create_client(user_id, user_name, validated_phone)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ gsheet_manager.find_or_create_client (phone): {e}")
    data_manager.update_user_session_data(chat_id, 'state', 'awaiting_client_comment_prompt')
    if main_message_id:
        try:
            bot_obj.delete_message(chat_id, main_message_id); data_manager.update_user_session_data(chat_id,
                                                                                                    'main_message_id',
                                                                                                    None)
        except Exception as e:
            print(f"Error deleting main_message_id {main_message_id} in process_phone_input: {e}")
    try:
        bot_obj.delete_message(chat_id, message.message_id)
    except Exception as e:
        print(f"Error deleting user phone message {message.message_id}: {e}")
    order_data = data_manager.get_order(order_id);
    summary = utils.format_order_details_for_client(order_data)
    text = f"–°–ø–∞—Å–∏–±–æ! –í–∞—à –∑–∞–∫–∞–∑ `‚Ññ{order_id}` –ø–æ—á—Ç–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω.\n{summary}\n\n–•–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É?"
    markup = keyboards.confirm_action_keyboard(f"client_comment_yes_{order_id}", f"client_comment_no_{order_id}", "–î–∞",
                                               "–ù–µ—Ç")
    new_main_msg = bot_obj.send_message(chat_id, text, reply_markup=markup, parse_mode='Markdown')
    data_manager.update_user_session_data(chat_id, 'main_message_id', new_main_msg.message_id)


def handle_client_comment_prompt(call, bot_obj):
    chat_id = call.message.chat.id;
    user_session = data_manager.get_user_session_data(chat_id)
    message_id = user_session.get('main_message_id', call.message.message_id);
    order_id = call.data.split('_')[-1]
    try:
        bot_obj.answer_callback_query(call.id)
    except Exception as e_ans:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback_query (comment_prompt {call.data}): {e_ans}")
    if user_session.get('current_order_id') != order_id:
        _send_or_edit_main_message(bot_obj, chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
                                   reply_markup=keyboards.main_menu_keyboard(), existing_message_id=message_id);
        data_manager.clear_user_order_session(chat_id);
        return
    if call.data.startswith("client_comment_yes_"):
        data_manager.update_user_session_data(chat_id, 'state', 'awaiting_client_comment')
        _send_or_edit_main_message(bot_obj, chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É:", reply_markup=None,
                                   existing_message_id=message_id)
    elif call.data.startswith("client_comment_no_"):
        finalize_client_order_submission(chat_id, order_id, bot_obj, message_id_to_edit=message_id)


def process_client_comment(message, bot_obj):
    chat_id = message.chat.id;
    user_session = data_manager.get_user_session_data(chat_id)
    main_message_id = user_session.get('main_message_id');
    order_id = user_session.get('current_order_id');
    comment = message.text.strip()
    if not order_id or not data_manager.get_order(order_id):
        bot_obj.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.",
                             reply_markup=keyboards.main_menu_keyboard());
        data_manager.clear_user_order_session(chat_id);
        data_manager.update_user_session_data(chat_id, 'state', None);
        return
    data_manager.update_order(order_id,
                              {'client_comment': comment, 'last_updated_utc': datetime.utcnow().isoformat() + "Z"})
    if main_message_id:
        try:
            bot_obj.delete_message(chat_id, main_message_id); data_manager.update_user_session_data(chat_id,
                                                                                                    'main_message_id',
                                                                                                    None)
        except Exception as e:
            print(f"Error deleting main_message_id {main_message_id} in process_client_comment: {e}")
    try:
        bot_obj.delete_message(chat_id, message.message_id)
    except Exception as e:
        print(f"Error deleting user comment message {message.message_id}: {e}")
    finalize_client_order_submission(chat_id, order_id, bot_obj)


def finalize_client_order_submission(chat_id, order_id, bot_obj, message_id_to_edit=None):
    user_id = chat_id;
    order_data = data_manager.get_order(order_id)
    if not order_data: return
    final_status = 'processing';
    now_utc_iso = datetime.utcnow().isoformat() + "Z"
    if order_data.get('is_off_hours_order'): final_status = 'off_hours_pending'
    data_manager.update_order(order_id, {'status': final_status, 'finalized_at_utc': now_utc_iso,
                                         'last_updated_utc': now_utc_iso})
    order_data = data_manager.get_order(order_id)
    client_summary = utils.format_order_details_for_client(order_data)
    final_text = f"‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à –∑–∞–∫–∞–∑ `‚Ññ{order_id}` –ø—Ä–∏–Ω—è—Ç.\n\n{client_summary}"
    if order_data.get('is_off_hours_order'): final_text += "\n\n–ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —ç—Ç–æ –ø—Ä–µ–¥–∑–∞–∫–∞–∑."
    final_text += "\n\n–û–∂–∏–¥–∞–π—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –æ–ø–ª–∞—Ç–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
    if message_id_to_edit:
        edited_msg = _send_or_edit_main_message(bot_obj, chat_id, final_text,
                                                reply_markup=keyboards.back_to_main_menu_keyboard(),
                                                existing_message_id=message_id_to_edit, parse_mode='Markdown',
                                                new_message_if_edit_fails=False)
        if not edited_msg: new_main_msg = bot_obj.send_message(chat_id, final_text,
                                                               reply_markup=keyboards.back_to_main_menu_keyboard(),
                                                               parse_mode='Markdown'); data_manager.update_user_session_data(
            chat_id, 'main_message_id', new_main_msg.message_id)
    else:
        new_main_msg = bot_obj.send_message(chat_id, final_text, reply_markup=keyboards.back_to_main_menu_keyboard(),
                                            parse_mode='Markdown'); data_manager.update_user_session_data(chat_id,
                                                                                                          'main_message_id',
                                                                                                          new_main_msg.message_id)
    admin_summary = utils.format_order_details_for_admin(order_data)
    admin_markup = keyboards.admin_order_keyboard(order_id, order_data.get('status', 'N/A'))
    try:
        if ADMIN_GROUP_ID:
            admin_msg = bot_obj.send_message(ADMIN_GROUP_ID, admin_summary, reply_markup=admin_markup,
                                             parse_mode='Markdown')
            data_manager.update_order(order_id, {'admin_group_message_id': admin_msg.message_id})
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞ {order_id} –≤ –≥—Ä—É–ø–ø—É {ADMIN_GROUP_ID}: {e}")
    try:
        gsheet_manager.update_client_order_info(user_id, order_data.get('total_price', 0))
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ gsheet_manager.update_client_order_info: {e}")
    data_manager.update_user_session_data(chat_id, 'cart', []);
    data_manager.update_user_session_data(chat_id, 'viewed_removed_items', [])


def handle_client_confirm_delivery(call, bot_obj):
    chat_id = call.message.chat.id;
    try:
        order_id = call.data.split('client_delivery_confirmed_')[1]
    except IndexError:
        print(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è order_id: {call.data}"); return
    user_session = data_manager.get_user_session_data(chat_id);
    main_message_id_for_client = user_session.get('main_message_id', call.message.message_id)
    try:
        bot_obj.answer_callback_query(call.id, TEXTS.get("order_received_notification", "–ó–∞–∫–∞–∑ –ø–æ–ª—É—á–µ–Ω! –°–ø–∞—Å–∏–±–æ!"))
    except Exception as e_ans:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback_query (client_confirm_delivery): {e_ans}")
    now_utc_iso = datetime.utcnow().isoformat() + "Z"
    if data_manager.update_order(order_id, {'status': 'client_confirmed_delivery',
                                            'client_confirmed_delivery_at_utc': now_utc_iso,
                                            'completed_at_utc': now_utc_iso, 'last_updated_utc': now_utc_iso}):
        if 'admin_handlers' in globals() and hasattr(admin_handlers, '_update_admin_order_message'):
            admin_handlers._update_admin_order_message(bot_obj, order_id,
                                                       f"Client confirmed delivery for order #{order_id}.")
        client_order_data = data_manager.get_order(order_id);
        updated_client_text = utils.format_order_details_for_client(client_order_data)
        review_request_text = TEXTS.get('order_delivery_confirmed_ask_review',
                                        '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ! –û—Å—Ç–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–∑—ã–≤.')
        updated_client_text += f"\n\n{review_request_text}"
        _send_or_edit_main_message(bot_obj, chat_id, updated_client_text,
                                   reply_markup=keyboards.back_to_main_menu_keyboard(),
                                   existing_message_id=main_message_id_for_client)
        data_manager.update_user_session_data(chat_id, 'state', f'awaiting_review_text_{order_id}')
        data_manager.update_user_session_data(chat_id, 'current_order_id', order_id)
        print(f"–ó–∞–ø—Ä–æ—à–µ–Ω –æ—Ç–∑—ã–≤ —É –∫–ª–∏–µ–Ω—Ç–∞ {chat_id} –ø–æ –∑–∞–∫–∞–∑—É {order_id} –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏.")
    else:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ {order_id} –Ω–∞ client_confirmed_delivery.")


def handle_navigation_callbacks(call, bot_obj):
    chat_id = call.message.chat.id;
    user_session = data_manager.get_user_session_data(chat_id)
    message_id = user_session.get('main_message_id', call.message.message_id)
    user_name = call.from_user.first_name or "–ì–æ—Å—Ç—å";
    user_id = call.from_user.id
    try:
        bot_obj.answer_callback_query(call.id)
    except Exception as e_ans:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback_query (navigation {call.data}): {e_ans}")

    current_state = user_session.get('state', "")  # –ò–°–ü–†–ê–í–õ–ï–ù–û –ó–î–ï–°–¨

    if call.data == "to_main_menu":
        # –ù–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é, –µ—Å–ª–∏ –æ–∂–∏–¥–∞–µ—Ç—Å—è –æ—Ç–∑—ã–≤ –ò–õ–ò –æ–∂–∏–¥–∞–µ—Ç—Å—è –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
        if not (current_state.startswith('awaiting_review_text_') or \
                current_state.startswith('awaiting_feedback_')) and \
                (user_session.get('current_order_id') or user_session.get('feedback_info') or current_state != ""):
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} —É—à–µ–ª –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é.")
            data_manager.clear_user_order_session(
                chat_id)  # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ–ø–µ—Ä—å –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ—Å—Ç–æ —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å state –∏ cart/current_order_id
            data_manager.update_user_session_data(chat_id, 'feedback_info', {})  # –û—Ç–¥–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º feedback_info
            data_manager.update_user_session_data(chat_id, 'state', None)  # –Ø–≤–Ω—ã–π —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è

        text = f"–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, {utils.escape_markdown(user_name)}."
        markup = keyboards.main_menu_keyboard()
        _send_or_edit_main_message(bot_obj, chat_id, text, reply_markup=markup, existing_message_id=message_id,
                                   photo_path=WELCOME_IMAGE_PATH)

    elif call.data == "to_categories":
        text = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:";
        cart = user_session.get('cart', [])
        markup = keyboards.categories_keyboard(cart)
        _send_or_edit_main_message(bot_obj, chat_id, text, reply_markup=markup, existing_message_id=message_id)
    elif call.data == "preorder_yes":
        start_new_order_process(chat_id, user_id, user_name, bot_obj, message_id, is_preorder=True)
    elif call.data == "preorder_no":
        _send_or_edit_main_message(bot_obj, chat_id, "–•–æ—Ä–æ—à–æ. –í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –ø–æ–∑–∂–µ!",
                                   reply_markup=keyboards.main_menu_keyboard(), existing_message_id=message_id)


# --- –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –û–ë–†–ê–¢–ù–û–ô –°–í–Ø–ó–ò ---
def process_feedback_name(message, bot_obj):
    chat_id = message.chat.id
    user_name_for_feedback = message.text.strip()
    user_session = data_manager.get_user_session_data(chat_id)
    main_message_id = user_session.get('main_message_id')

    if not user_name_for_feedback:
        bot_obj.send_message(chat_id, "–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
        return

    feedback_info = user_session.get('feedback_info', {})
    feedback_info['name'] = user_name_for_feedback
    data_manager.update_user_session_data(chat_id, 'feedback_info', feedback_info)
    data_manager.update_user_session_data(chat_id, 'state', 'awaiting_feedback_phone')

    prompt_text = TEXTS.get("feedback_prompt_phone", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω:")

    try:
        bot_obj.delete_message(chat_id, message.message_id)
    except Exception as e:
        print(f"Error deleting user feedback name message: {e}")

    _send_or_edit_main_message(bot_obj, chat_id, prompt_text,
                               reply_markup=keyboards.back_to_main_menu_keyboard(),
                               existing_message_id=main_message_id,
                               new_message_if_edit_fails=True)
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –≤–≤–µ–ª –∏–º—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: '{user_name_for_feedback}'. –û–∂–∏–¥–∞–µ—Ç—Å—è —Ç–µ–ª–µ—Ñ–æ–Ω.")


def process_feedback_phone(message, bot_obj):
    chat_id = message.chat.id
    phone_for_feedback = message.text.strip()
    user_session = data_manager.get_user_session_data(chat_id)
    main_message_id = user_session.get('main_message_id')
    feedback_info = user_session.get('feedback_info', {})

    if not phone_for_feedback:
        bot_obj.send_message(chat_id,
                             "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω:")
        return

    feedback_info['phone'] = phone_for_feedback
    data_manager.update_user_session_data(chat_id, 'feedback_info', feedback_info)
    data_manager.update_user_session_data(chat_id, 'state', 'awaiting_feedback_message')

    prompt_text = TEXTS.get("feedback_prompt_message", "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ/–æ—Ç–∑—ã–≤/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:")

    try:
        bot_obj.delete_message(chat_id, message.message_id)
    except Exception as e:
        print(f"Error deleting user feedback phone message: {e}")

    _send_or_edit_main_message(bot_obj, chat_id, prompt_text,
                               reply_markup=keyboards.back_to_main_menu_keyboard(),
                               existing_message_id=main_message_id,
                               new_message_if_edit_fails=True)
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –≤–≤–µ–ª —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: '{phone_for_feedback}'. –û–∂–∏–¥–∞–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ.")


def process_feedback_message(message, bot_obj):
    chat_id = message.chat.id
    feedback_text = message.text.strip()
    user_session = data_manager.get_user_session_data(chat_id)
    main_message_id = user_session.get('main_message_id')
    feedback_info = user_session.get('feedback_info', {})

    if not feedback_text:
        bot_obj.send_message(chat_id,
                             "–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
        return

    feedback_info['message'] = feedback_text
    telegram_user_name = message.from_user.first_name
    if message.from_user.last_name: telegram_user_name += f" {message.from_user.last_name}"
    if message.from_user.username: telegram_user_name += f" (@{message.from_user.username})"
    telegram_user_id = message.from_user.id

    admin_notification_template = TEXTS.get("feedback_admin_notification_format",
                                            ("Feedback Received:\n"
                                             "Telegram User: {telegram_user_name} (ID: `{telegram_user_id}`)\n"
                                             "Provided Name: {feedback_name}\n"
                                             "Provided Phone: {feedback_phone}\n\n"
                                             "Message:\n{feedback_message}"))
    admin_message_text = admin_notification_template.format(
        telegram_user_name=utils.escape_markdown(telegram_user_name),
        telegram_user_id=telegram_user_id,
        feedback_name=utils.escape_markdown(feedback_info.get('name', '-')),
        feedback_phone=utils.escape_markdown(feedback_info.get('phone', '-')),
        feedback_message=utils.escape_markdown(feedback_text)
    )
    if ADMIN_GROUP_ID:
        try:
            bot_obj.send_message(ADMIN_GROUP_ID, admin_message_text, parse_mode='Markdown')
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –≤ –≥—Ä—É–ø–ø—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {e}")
    else:
        print("ADMIN_GROUP_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
    thanks_text = TEXTS.get("feedback_thanks", "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å! –ú—ã –µ–µ –∏–∑—É—á–∏–º.")
    try:
        bot_obj.delete_message(chat_id, message.message_id)
    except Exception as e:
        print(f"Error deleting user feedback text message: {e}")

    # –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    send_welcome(message, bot_obj)  # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –í—ã–∑—ã–≤–∞–µ–º send_welcome –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ (—Ç–µ–ø–µ—Ä—å —ç—Ç–æ –¥–µ–ª–∞–µ—Ç init_user_order_session –≤ send_welcome)
    # data_manager.update_user_session_data(chat_id, 'state', None)
    # data_manager.update_user_session_data(chat_id, 'feedback_info', {})
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –∑–∞–≤–µ—Ä—à–∏–ª –ø—Ä–æ—Ü–µ—Å—Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏.")


print("–ú–æ–¥—É–ª—å client_handlers.py –∑–∞–≥—Ä—É–∂–µ–Ω.")